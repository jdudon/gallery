[
  {
    "id": "017",
    "title": "Variables et Constante (1/2)",
    "consigne": "Créer un fichier Index.html, un fichier script.js et relier les deux en ajoutant une balise script dans le body de l’Index.html.\n\nDans le fichier script.js, on voudra stocker plusieurs valeurs:\n\n- Le nom\n- Le prenom\n- L’âge\n- Le numero de Sécurité sociale\n\nIndiquer si chacune de ces valeurs sera stockée dans une variable ou une constante et les déclarer dans le fichier.",
    "correctionDisponible": true,
    "correction": "<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Variables et constantes</title>\n</head>\n<body>\n  <h1>Exercice : Variables et constantes</h1>\n  <p>Consultez la console pour voir les valeurs.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n\n//\n<script> Utilisation d'une constante pour le nom et le prénom car ils ne changent pas\nconst nom = \"Dupont\";\nconst prenom = \"Marie\";\n\n// Utilisation d'une constante pour l'âge si on considère qu'il est fixé au moment de la déclaration\nconst age = 25;\n\n// Utilisation d'une constante pour le numéro de sécurité sociale car il est unique et ne change jamais\nconst numeroSecuriteSociale = \"123-45-6789\";\n\n// Affichage dans la console\nconsole.log(\"Nom :\", nom);\nconsole.log(\"Prénom :\", prenom);\nconsole.log(\"Âge :\", age);\nconsole.log(\"Numéro de sécurité sociale :\", numeroSecuriteSociale);\n</script>",
    "tags": [
      "Bases",
      "JS"
    ]
  },
  {
    "id": "018",
    "title": "Variables et Constante (2/2)",
    "consigne": "- Lancer l’Index.html en live server.\n- Ouvrir la console du Navigateur.\n- Afficher la valeur de la variable age.\n- Changer la valeur de la variable age.\n- Vérifier que la modification s’est effectuée",
    "correctionDisponible": true,
    "correction": "<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Variables et constantes</title>\n</head>\n<body>\n    <h1>Exercice : Variables et constantes</h1>\n    <p>Consultez la console pour voir les valeurs.</p>\n    <script src=\"script.js\"></script>\n</body>\n</html>\n\n<script>\n// Utilisation d'une constante pour le nom et le prénom car ils ne changent pas\nconst nom = \"Dupont\";\nconst prenom = \"Marie\";\n\n// Utilisation d'une variable pour l'âge car il peut être modifié\nlet age = 25;\n\n// Utilisation d'une constante pour le numéro de sécurité sociale car il est unique et ne change jamais\nconst numeroSecuriteSociale = \"123-45-6789\";\n\n// Affichage initial de l'âge dans la console\nconsole.log(\"Âge initial :\", age);\n\n// Modification de la valeur de la variable age\nage = 26;\n\n// Vérification que la modification a bien été effectuée\nconsole.log(\"Âge modifié :\", age);\n</script>",
    "tags": [
      "JS",
      "Bases"
    ]
  },
  {
    "id": "019",
    "title": "Joyeux anniversaire - Chaînes de caractères - Concaténation",
    "consigne": "1. Créer trois variables (nom, prenom et age).\n2. Utiliser la console pour faire apparaitre le nom le prénom et l’âge stockés (avec des espaces entre chaque) en concaténant.\n3. Utiliser la console pour Ecrire : “Joyeux Anniversaire” suivit du nom, du prénom et de “Vous avez” age “aujourd’hui!”.\n\nBONUS:\n\n- Créez une section ou un élément HTML (par exemple un <p> avec un id) dans le fichier index.html, où le texte sera inséré.\n- Dans le fichier script.js :\n    - Sélectionnez cet élément en utilisant son id via JavaScript.\n    - Insérez dans cet élément une phrase sous la forme : \"J'ai [âge] ans.\" en utilisant la variable age.\n- Vérifiez que la phrase s'affiche correctement dans la page lorsque vous l'ouvrez en Live Server.",
    "correctionDisponible": true,
    "correction": "<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Concatenation avec JS</title>\n</head>\n<body>\n    <h1>Exercice : Concatenation</h1>\n    <p>Ouvrez la console pour voir les résultats.</p>\n    <script src=\"script.js\"></script>\n    <p id=\"age-container\"></p> <!-- Conteneur pour afficher l'âge -->\n</body>\n</html>\n\n<script>\n// Déclaration des variables\nlet nom = \"Dupont\";\nlet prenom = \"Marie\";\nlet age = 25;\n\n// Affichage du nom, prénom et âge avec des espaces entre chaque (concaténation)\nconsole.log(nom + \" \" + prenom + \" \" + age);\n\n// Affichage d'un message d'anniversaire personnalisé\nconsole.log(\"Joyeux Anniversaire \" + nom + \" \" + prenom + \"! Vous avez \" + age + \" ans aujourd’hui!\");\n\n// Modification du DOM pour afficher une phrase indiquant l'âge\nconst ageContainer = document.getElementById(\"age-container\");\nageContainer.textContent = \"J'ai \" + age + \" ans.\";\n</script>",
    "tags": [
      "JS",
      "Chaînes",
      "Bases"
    ]
  },
  {
    "id": "020",
    "title": "Moyenne - Les nombres",
    "consigne": "1. Déclarez trois variables note1, note2 et note3 et assignez-leur des nombres représentant des notes. Ensuite, calculez la moyenne de ces trois notes et stockez le résultat dans une variable moyenne. Affichez la moyenne dans la console.\n2. Déclarez une variable nombreTotal représentant une quantité totale, par exemple 100. Ensuite, déclarez une variable pourcentage représentant un pourcentage de cette quantité totale, par exemple 20 pour 20%. Calculez le pourcentage de la quantité totale et stockez le résultat dans une variable resultat. Affichez le résultat dans la console.\n\nBONUS\n\nDans le fichier HTML :\n- Ajoutez une balise <p> avec un identifiant (par exemple id=\"p1\") qui servira de conteneur pour afficher la moyenne calculée.\n\nDans le fichier JavaScript :\n- Utilisez la méthode document.getElementById('p1') pour sélectionner la balise <p> que vous avez créée.\n- Ensuite, modifiez son contenu en utilisant la propriété .innerHTML pour y insérer la phrase : \"La moyenne des notes est : [valeur calculée]\".",
    "correctionDisponible": true,
    "correction": "<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Exercice JavaScript</title>\n</head>\n<body>\n    <p id=\"p1\"></p>\n    <script src=\"script.js\"></script>\n</body>\n</html>\n\n<script>\n// 1. Calcul de la moyenne\nlet note1 = 15;\nlet note2 = 18;\nlet note3 = 12;\n\nlet moyenne = (note1 + note2 + note3) / 3;\n\nconsole.log(\"La moyenne des notes est :\", moyenne);\n\ndocument.getElementById('p1').innerHTML = \"La moyenne des notes est : \" + moyenne.toFixed(2);\n\n// 2. Calcul du pourcentage\nlet nombreTotal = 100;\nlet pourcentage = 20;\n\nlet resultat = (nombreTotal * pourcentage) / 100;\n\nconsole.log(\"Le pourcentage de la quantité totale est :\", resultat);\n</script>",
    "tags": [
      "JS",
      "Calcul",
      "Bases"
    ]
  },
  {
    "id": "021",
    "title": "Réussite exam - Opérateurs de comparaison et condition if",
    "consigne": "1. Déclarez une fonction appelée verifierReussiteExamen qui prend un paramètre note.\n2. À l'intérieur de la fonction, utilisez une instruction conditionnelle pour vérifier si la note de l'étudiant est supérieure ou égale à la note minimale pour réussir l'examen.\n3. Définissez la note minimale pour réussir l'examen à 10.\n4. Si la note est supérieure ou égale à 10, affichez un message indiquant que l'étudiant a réussi l'examen.\n5. Sinon, affichez un message indiquant que l'étudiant a échoué à l'examen.",
    "correctionDisponible": true,
    "correction": "<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Exercice JavaScript - Vérification de réussite</title>\n</head>\n<body>\n    <script src=\"script.js\"></script>\n</body>\n</html>\n\n<script>\n// Déclaration de la fonction verifierReussiteExamen\nfunction verifierReussiteExamen(note) {\n    const noteMinimale = 10;\n\n    if (note >= noteMinimale) {\n        console.log(\"Félicitations ! Vous avez réussi l'examen.\");\n    } else {\n        console.log(\"Désolé, vous avez échoué à l'examen.\");\n    }\n}\n\n// Exemple d'appel de la fonction\nverifierReussiteExamen(12);\nverifierReussiteExamen(8);\n</script>",
    "tags": [
      "JS",
      "Conditions",
      "Fonctions",
      "Bases"
    ]
  },
  {
    "id": "022",
    "title": "Fonctionnalité de salutations - Fonctions",
    "consigne": "1. Créer une variable username et mettez-y la valeur de votre choix (de type string).\n2. Créer une variable jours et mettez-y la valeur de votre choix (de type number).\n3. Créer une fonction salutations(), qui prend en paramètres username et jours et qui incrémentera jours de 1 et indiquera dans la console “Bonjour ... , vous êtes connectés depuis ... jours”.\n4. Appelez salutations() et vérifiez votre console.",
    "correctionDisponible": true,
    "correction": "<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Exercice JavaScript</title>\n</head>\n<body>\n    <script src=\"script.js\"></script>\n</body>\n</html>\n\n<script>\n// Création de la variable 'username' de type string\nlet username = \"Jessica\";\n\n// Création de la variable 'jours' de type number\nlet jours = 5;\n\n// Fonction 'salutations' qui prend en paramètres 'username' et 'jours'\nfunction salutations(username, jours) {\n    jours += 1;  // Incrémentation de 'jours' de 1\n    console.log(`Bonjour ${username}, vous êtes connectés depuis ${jours} jours`);\n}\n\n// Appel de la fonction salutations\nsalutations(username, jours);\n</script>",
    "tags": [
      "JS",
      "Fonctions",
      "Bases"
    ]
  },
  {
    "id": "023",
    "title": "Gestion stock magasin v1",
    "consigne": "Vous gérez un magasin en ligne et vous souhaitez créer des identifiants de produit uniques en combinant un numéro de produit avec un libellé. Vous avez un numéro de produit initial et un libellé de produit.\n\n1. Déclarez une variable numeroProduit et assignez-lui un nombre représentant le numéro initial du produit.\n2. Déclarez une constante libelleProduit et assignez-lui une chaîne de caractères représentant le libellé du produit.\n3. Utilisez une opération mathématique pour augmenter le numeroProduit de 1.\n4. Passez libelleProduit en majuscules et stockez la valeur finale dans une variable.\n5. Concaténez le numeroProduit avec le libelleProduit en majuscules pour former l'identifiant unique du produit.\n6. Affichez l'identifiant unique du produit dans la console.",
    "correctionDisponible": true,
    "correction": "<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Identifiant Produit</title>\n</head>\n<body>\n    <h1>Exercice : Identifiant de produit unique</h1>\n    <p id=\"produit\"></p>\n    <script src=\"script.js\"></script>\n</body>\n</html>\n\n<script>\n// Déclarez une variable pour le numéro initial du produit\nlet numeroProduit = 1001;\n\n// Déclarez une constante pour le libellé du produit\nconst libelleProduit = \"chaise\";\n\n// Augmentez le numéro du produit de 1\nnumeroProduit += 1;\n\n// Transformez le libellé en majuscules\nlet libelleProduitMajuscules = libelleProduit.toUpperCase();\n\n// Concaténez le numéro du produit avec le libellé en majuscules\nlet identifiantUnique = numeroProduit + \"_\" + libelleProduitMajuscules;\n\n// Affichez l'identifiant unique dans la console\nconsole.log(\"Identifiant unique du produit :\", identifiantUnique);\n\n// Bonus : Modification du DOM pour afficher l'identifiant unique\ndocument.getElementById(\"produit\").textContent = \"Identifiant unique du produit : \" + identifiantUnique;\n</script>",
    "tags": [
      "JS",
      "Chaînes",
      "Variables"
    ]
  },
  {
    "id": "024",
    "title": "Jeu du Guess The Number v1",
    "consigne": "Créer un jeu “Devine Le Nombre” :\nL’ordinateur choisit un nombre au hasard entre 1 et 10 et l’utilisateur doit deviner ce nombre.\nLe jeu choisira un nombre aléatoire entre 1 et 10 (inclus).\n\n1. Tu as un seul essai pour deviner ce nombre.\n2. Utilise la fonction prompt() pour saisir ta proposition de nombre.\n3. Si ton nombre est égal au nombre mystère, tu gagnes ! Sinon, le jeu affichera le nombre mystère.",
    "correctionDisponible": false,
    "correction": "<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Jeu Devine Le Nombre</title>\n</head>\n<body>\n    <script src=\"script.js\"></script>\n</body>\n</html>\n\n<script>\n// Fonction pour jouer à \"Devine Le Nombre\"\nfunction devineLeNombre() {\n    // L'ordinateur choisit un nombre aléatoire entre 1 et 10\n    const nombreMystere = Math.floor(Math.random() * 10) + 1;\n\n    // Demande à l'utilisateur de deviner le nombre\n    const proposition = parseInt(prompt(\"Devine un nombre entre 1 et 10\"));\n\n    // Vérifie si la proposition est égale au nombre mystère\n    if (proposition === nombreMystere) {\n        alert(\"Bravo, tu as deviné le bon nombre !\");\n    } else {\n        alert(\"Dommage, le nombre mystère était \" + nombreMystere);\n    }\n}\n\ndevineLeNombre();\n</script>",
    "tags": [
      "JS",
      "Conditions",
      "Aléatoire",
      "Interactions"
    ]
  },
  {
    "id": "025",
    "title": "Nein nein - Itérations",
    "consigne": "1. Créez une fonction sayHello qui affichera dans la console “Bonjour” suivi du prénom de chaque apprenant de la cdweb. Utilisez une boucle pour ça.\n2. Créez une boucle qui executera 10 fois le texte “NEIN”.",
    "correctionDisponible": false,
    "correction": "<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Exercice Tableau Apprenants</title>\n</head>\n<body>\n    <h1>Groupe des apprenants</h1>\n    <script src=\"script.js\"></script>\n</body>\n</html>\n\n<script>\n// Stockage des prénoms des apprenants dans le tableau 'cdweb7b'\nlet cdweb7b = [\"Paul\", \"Marie\", \"Léo\", \"Sophie\", \"Ahmed\", \"Clara\"];\n\n// Fonction sayHello qui affiche \"Bonjour [prénom]\" pour chaque apprenant\nfunction sayHello(liste) {\n  for (let i = 0; i < liste.length; i++) {\n    console.log(\"Bonjour \" + liste[i]);\n  }\n}\nsayHello(cdweb7b);\n\n// Boucle qui affiche \"NEIN\" 10 fois\nfor (let i = 0; i < 10; i++) {\n  console.log(\"NEIN\");\n}\n</script>",
    "tags": [
      "JS",
      "Boucles",
      "Tableaux"
    ]
  },
  {
    "id": "026",
    "title": "Jeu du Guess The Number v2 (avec ou sans modif du DOM)",
    "consigne": "Améliorer le jeu du “Devine Le nombre” :\n\nLe joueur a le droit à 3 essais. S'il dépasse ce nombre, le jeu recommence.\n\n1. Le jeu choisira un nombre aléatoire entre 1 et 10 (inclus).\n2. Tu as trois essais pour deviner ce nombre.\n3. Utilise la fonction prompt() pour saisir ta proposition de nombre.\n4. Si ton nombre est égal au nombre mystère, tu gagnes ! Sinon tu dois retenter ta chance. Au bout de trois essais, tu as perdu et le jeu recommence.\n\nBonne chance !",
    "correctionDisponible": false,
    "correction": "<!-- VERSION AVEC PROMPT -->\n<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Jeu Devine Le Nombre</title>\n</head>\n<body>\n    <script src=\"script.js\"></script>\n</body>\n</html>\n\n// VERSION PROMPT\nfunction devineLeNombre() {\n    const nombreMystere = Math.floor(Math.random() * 10) + 1;\n    let essaisRestants = 3;\n    let gagne = false;\n\n    while (essaisRestants > 0 && !gagne) {\n        let proposition = parseInt(prompt(`Il vous reste ${essaisRestants} essais. Devinez un nombre entre 1 et 10`));\n\n        if (proposition === nombreMystere) {\n            alert(\"Bravo, tu as deviné le bon nombre !\");\n            gagne = true;\n        } else {\n            essaisRestants--;\n            if (essaisRestants > 0) {\n                alert(\"Dommage, ce n'est pas le bon nombre. Retentez !\");\n            }\n        }\n    }\n\n    if (!gagne) {\n        alert(`Tu as perdu ! Le nombre mystère était ${nombreMystere}. Le jeu recommence !`);\n        devineLeNombre();\n    }\n}\n\ndevineLeNombre();\n\n\n<!-- VERSION AVEC DOM (HARD) -->\n<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Jeu Devine Le Nombre</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            text-align: center;\n            margin-top: 50px;\n        }\n        .message {\n            font-size: 1.2em;\n            margin-top: 20px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Jeu Devine Le Nombre</h1>\n    <p>Devine un nombre entre 1 et 10 !</p>\n\n    <form id=\"gameForm\">\n        <label for=\"guess\">Proposez un nombre : </label>\n        <input type=\"number\" id=\"guess\" min=\"1\" max=\"10\" required>\n        <button type=\"submit\">Soumettre</button>\n    </form>\n\n    <p class=\"message\" id=\"resultMessage\"></p>\n    <p class=\"message\" id=\"attemptsLeft\"></p>\n\n    <script>\n        let nombreMystere = Math.floor(Math.random() * 10) + 1;\n        let essaisRestants = 3;\n        let gagne = false;\n\n        const form = document.getElementById('gameForm');\n        const guessInput = document.getElementById('guess');\n        const resultMessage = document.getElementById('resultMessage');\n        const attemptsLeftMessage = document.getElementById('attemptsLeft');\n\n        form.addEventListener('submit', function(event) {\n            event.preventDefault();\n            const proposition = parseInt(guessInput.value);\n\n            if (proposition === nombreMystere) {\n                resultMessage.textContent = \"Bravo, tu as deviné le bon nombre !\";\n                gagne = true;\n            } else {\n                essaisRestants--;\n                if (essaisRestants > 0) {\n                    resultMessage.textContent = \"Dommage, ce n'est pas le bon nombre. Retentez !\";\n                    attemptsLeftMessage.textContent = `Il vous reste ${essaisRestants} essais.`;\n                } else {\n                    resultMessage.textContent = `Tu as perdu ! Le nombre mystère était ${nombreMystere}.`;\n                    attemptsLeftMessage.textContent = \"\";\n                    setTimeout(restartGame, 3000);\n                }\n            }\n\n            guessInput.value = '';\n            guessInput.focus();\n        });\n\n        function restartGame() {\n            nombreMystere = Math.floor(Math.random() * 10) + 1;\n            essaisRestants = 3;\n            gagne = false;\n            resultMessage.textContent = '';\n            attemptsLeftMessage.textContent = `Il vous reste ${essaisRestants} essais.`;\n            guessInput.value = '';\n        }\n    </script>\n</body>\n</html>",
    "tags": [
      "JS",
      "Conditions",
      "Boucles",
      "DOM",
      "Aléatoire"
    ]
  },
  {
    "id": "027",
    "title": "Gestionnaire de tâches",
    "consigne": "Une liste de tâches où l'utilisateur peut :\n\n- Ajouter une tâche.\n- Modifier une tâche.\n- Supprimer une tâche.\n- Voir toutes les tâches affichées.\n- (Bonus) Les tâches sont sauvegardées dans un fichier JSON.\n\n### Etapes\n\n- Etape 1\n  - Créer un fichier HTML de base.\n  - Ajouter un titre principal : \"Ma liste de tâches\".\n  - Ajouter un formulaire contenant :\n    - Un champ texte pour écrire le nom d'une tâche.\n    - Un bouton \"Ajouter\".\n  - Ajouter une liste vide pour afficher les tâches.\n\n- Etape 2\n  1. Créer un fichier CSS.\n  2. Appliquer des styles généraux :\n    - Centrer le contenu de la page.\n    - Ajouter des marges entre les éléments.\n  3. Appliquer des styles spécifiques :\n    - Afficher les tâches sous forme de blocs lisibles (fond clair, bordures arrondies).\n    - Ajouter un style minimal aux boutons.\n\n- Etape 3\n  - Attacher un événement `submit` au formulaire.\n  - Quand l'événement est déclenché :\n    - Empêcher le rechargement de la page.\n    - Récupérer la valeur du champ texte.\n    - Créer un élément de liste (`li`) avec cette valeur.\n    - Ajouter cet élément à la liste affichée.\n    - Réinitialiser le champ texte.\n\n- Etape 4\n  - Ajouter un bouton \"Supprimer\" à chaque tâche lors de sa création.\n  - Quand le bouton \"Supprimer\" est cliqué :\n    - Récupérer la tâche associée.\n    - Supprimer cette tâche de la liste affichée.\n\n- Etape 5\n  - Ajouter un bouton \"Modifier\" à chaque tâche lors de sa création.\n  - Quand le bouton \"Modifier\" est cliqué :\n    - Remplacer le texte de la tâche par un champ texte pré-rempli avec la valeur actuelle.\n    - Ajouter un bouton \"Sauvegarder\" à côté du champ texte.",
    "correctionDisponible": false,
    "correction": "<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Liste de Tâches</title>\n  <link rel=\"stylesheet\" href=\"tasks.css\">\n</head>\n<body>\n  <h1>Ma liste de tâches</h1>\n  <form id=\"task-form\">\n    <input type=\"text\" id=\"task-input\" placeholder=\"Nouvelle tâche\" required />\n    <button type=\"submit\">Ajouter</button>\n  </form>\n  <ul id=\"task-list\"></ul>\n  <script>\n    document.getElementById('task-form').addEventListener('submit', function (e) {\n      e.preventDefault();\n      const taskInput = document.getElementById('task-input');\n      const taskList = document.getElementById('task-list');\n\n      const taskItem = document.createElement('li');\n      taskItem.textContent = taskInput.value;\n\n      const deleteButton = document.createElement('button');\n      deleteButton.textContent = 'Supprimer';\n      deleteButton.addEventListener('click', function () {\n        taskList.removeChild(taskItem);\n      });\n      taskItem.appendChild(deleteButton);\n\n      const editButton = document.createElement('button');\n      editButton.textContent = 'Modifier';\n      editButton.addEventListener('click', function () {\n        const newInput = document.createElement('input');\n        newInput.type = 'text';\n        newInput.value = taskItem.firstChild.textContent;\n\n        const saveButton = document.createElement('button');\n        saveButton.textContent = 'Sauvegarder';\n        saveButton.addEventListener('click', function () {\n          taskItem.firstChild.textContent = newInput.value;\n          taskItem.removeChild(newInput);\n          taskItem.removeChild(saveButton);\n        });\n\n        taskItem.insertBefore(newInput, editButton);\n        taskItem.insertBefore(saveButton, editButton);\n      });\n\n      taskItem.appendChild(editButton);\n      taskList.appendChild(taskItem);\n      taskInput.value = '';\n    });\n  </script>\n</body>\n</html>",
    "tags": [
      "JS",
      "DOM",
      "Evénements",
      "CRUD"
    ]
  },
  {
    "id": "028",
    "title": "Tableau à deux dimensions - Affichage des matières et notes",
    "consigne": "Créer une interface qui utilise un tableau à deux dimensions pour afficher une liste de matières et leurs notes. Ajoutez une fonctionnalité pour calculer et afficher la moyenne des notes.\n\n- Utilisez un tableau à deux dimensions pour stocker les matières et les notes.\n    - Exemple : [[\"Maths\", 15], [\"Français\", 12], [\"Histoire\", 14], [\"Physique\", 17]].\n- Affichez dynamiquement les matières et les notes dans un tableau HTML.\n- Ajoutez un bouton \"Calculer la moyenne\".\n- Quand l'utilisateur clique sur ce bouton, affichez la moyenne des notes.",
    "correctionDisponible": false,
    "correction": "<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Moyenne des Notes</title>\n  <style>\n    table { border-collapse: collapse; width: 50%; margin: auto; }\n    th, td { border: 1px solid #ccc; padding: 8px; text-align: center; }\n    button { margin: 20px auto; display: block; padding: 10px 20px; }\n    p { text-align: center; font-weight: bold; }\n  </style>\n</head>\n<body>\n  <h1 style=\"text-align:center;\">Notes par matière</h1>\n  <table>\n    <thead>\n      <tr><th>Matière</th><th>Note</th></tr>\n    </thead>\n    <tbody id=\"notes-table\"></tbody>\n  </table>\n  <button id=\"calc-btn\">Calculer la moyenne</button>\n  <p id=\"moyenne\"></p>\n\n  <script>\n    const matieresNotes = [[\"Maths\", 15], [\"Français\", 12], [\"Histoire\", 14], [\"Physique\", 17]];\n    const tableBody = document.getElementById(\"notes-table\");\n    const moyenneEl = document.getElementById(\"moyenne\");\n\n    matieresNotes.forEach(([matiere, note]) => {\n      const row = document.createElement(\"tr\");\n      row.innerHTML = `<td>${matiere}</td><td>${note}</td>`;\n      tableBody.appendChild(row);\n    });\n\n    document.getElementById(\"calc-btn\").addEventListener(\"click\", () => {\n      const total = matieresNotes.reduce((sum, item) => sum + item[1], 0);\n      const moyenne = total / matieresNotes.length;\n      moyenneEl.textContent = `Moyenne : ${moyenne.toFixed(2)}`;\n    });\n  </script>\n</body>\n</html>",
    "tags": [
      "JS",
      "Tableaux",
      "DOM",
      "Calcul"
    ]
  },
  {
    "id": "029",
    "title": "Bouton change color & contenu",
    "consigne": "Créer une page interactive où un bouton permet de changer dynamiquement la couleur et le contenu d'une section.\n\n### HTML :\n- Créer une section principale `.full-view` qui occupe toute la hauteur de la fenêtre (100vh).\n- Ajouter un titre `<h2>` avec l’identifiant `section-heading`.\n- Ajouter un paragraphe `<p>` avec l’identifiant `section-paragraph`.\n- Ajouter un bouton `<button>` avec l’identifiant `changeContentButton`.\n\n### CSS :\n- Appliquer une couleur de fond bleue et une couleur de texte blanche à `.full-view`.\n- Centrer verticalement et horizontalement le contenu avec Flexbox.\n- Styliser le bouton avec :\n  - coins arrondis,\n  - couleurs complémentaires,\n  - effet de transition au survol.\n\n### JavaScript :\n- Sélectionner tous les éléments nécessaires (`section`, `h2`, `p`, `button`).\n- Créer une variable `isOriginal` pour suivre l’état du contenu.\n- Ajouter un événement `click` sur le bouton qui :\n  - change le fond en vert et le texte s’il est en état original,\n  - ou restaure les valeurs bleues d’origine sinon,\n  - et inverse l’état à chaque clic (`isOriginal = !isOriginal`).",
    "correctionDisponible": false,
    "correction": "<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Bouton Change Color</title>\n  <style>\n    .full-view {\n      height: 100vh;\n      background-color: blue;\n      color: white;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      transition: background-color 0.5s ease;\n    }\n\n    button {\n      margin-top: 20px;\n      padding: 10px 20px;\n      font-size: 1rem;\n      border: none;\n      border-radius: 8px;\n      background-color: white;\n      color: blue;\n      cursor: pointer;\n      transition: all 0.3s ease;\n    }\n\n    button:hover {\n      background-color: lightgray;\n      color: green;\n    }\n  </style>\n</head>\n<body>\n  <section class=\"full-view\" id=\"section\">\n    <h2 id=\"section-heading\">Titre original</h2>\n    <p id=\"section-paragraph\">Contenu initial de la section.</p>\n    <button id=\"changeContentButton\">Changer le contenu</button>\n  </section>\n\n  <script>\n    const section = document.getElementById(\"section\");\n    const heading = document.getElementById(\"section-heading\");\n    const paragraph = document.getElementById(\"section-paragraph\");\n    const button = document.getElementById(\"changeContentButton\");\n\n    let isOriginal = true;\n\n    button.addEventListener(\"click\", () => {\n      if (isOriginal) {\n        section.style.backgroundColor = \"green\";\n        heading.textContent = \"Titre modifié\";\n        paragraph.textContent = \"Le contenu a été changé !\";\n      } else {\n        section.style.backgroundColor = \"blue\";\n        heading.textContent = \"Titre original\";\n        paragraph.textContent = \"Contenu initial de la section.\";\n      }\n      isOriginal = !isOriginal;\n    });\n  </script>\n</body>\n</html>",
    "tags": [
      "JS",
      "DOM",
      "CSS",
      "Events"
    ]
  },
  {
    "id": "030",
    "title": "Memory Flip Cards",
    "consigne": "Créer un jeu où des cartes retournables doivent être associées par paires. Lorsqu'une paire correcte est trouvée, les cartes disparaissent. Sinon, elles se retournent après une brève période.\n\n## Fonctionnalités attendues :\n1. Chaque carte affiche une couleur lorsqu'elle est retournée.\n2. Les cartes sont disposées aléatoirement.\n3. Si deux cartes retournées correspondent, elles sont marquées comme \"trouvées\" et disparaissent.\n4. Si elles ne correspondent pas, elles se retournent après un délai.\n5. Une seule paire peut être retournée à la fois (verrouillage du plateau).\n\n### Etapes\n- Etape 1\n    1. Créer une structure HTML comprenant :\n        - Un conteneur pour afficher les cartes.\n        - 12 cartes avec des paires de couleurs (6 paires au total).\n        - Chaque carte contient un attribut `data-color` pour stocker sa couleur.\n- Etape 2\n    - Créer un plateau de jeu avec une disposition en grille.\n    - Style par défaut des cartes :\n        - Carrées, grises, et avec des bords arrondis.\n        - Change de couleur lorsqu'elles sont retournées.\n    - Ajouter des classes pour les états :\n        - `.flipped` : indique qu'une carte est retournée.\n        - `.matched` : indique qu'une paire est trouvée (et cachée).\n- Etape 3\n    **Sélection des éléments HTML**\n    - Récupérer toutes les cartes via leur classe.\n    - Initialiser les variables `firstCard`, `secondCard` et `lockBoard` pour gérer l'état du jeu.\n- Etape 4\n    - **Événements de clic**\n        - Ajouter un gestionnaire d'événements `click` pour chaque carte :\n            - Ignorer si le plateau est verrouillé ou si la carte est déjà retournée.\n            - Changer la couleur de la carte pour celle définie dans `data-color`.\n            - Ajouter la classe `.flipped`.\n- Etape 5\n    **Logique des paires**\n    - Si c'est la première carte :\n        - La stocker dans `firstCard`.\n    - Si c'est la deuxième carte :\n        - La stocker dans `secondCard`.\n        - Vérifier si les deux cartes ont la même couleur (`data-color`).\n- Etape 6\n    **Gestion des correspondances**\n    - Si les couleurs correspondent :\n        - Ajouter la classe `.matched` aux deux cartes.\n        - Réinitialiser `firstCard` et `secondCard`.\n    - Si les couleurs ne correspondent pas :\n        - Verrouiller le plateau pour empêcher d'autres interactions.\n        - Après un délai (1 seconde) :\n            - Réinitialiser les cartes en leur redonnant leur couleur initiale (grise) et en retirant la classe `.flipped`.\n            - Réinitialiser `firstCard`, `secondCard` et déverrouiller le plateau.\n- Bonus\n    ### Points supplémentaires\n    1. Disposer les cartes aléatoirement\n    2. Ajout d'un score\n    3. Fin de partie",
    "correctionDisponible": true,
    "correction": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Flip Card Game</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            text-align: center;\n            margin-top: 50px;\n        }\n\n        #game-board {\n            display: grid;\n            grid-template-columns: repeat(4, 100px);\n            gap: 10px;\n            justify-content: center;\n        }\n\n        .card {\n            width: 100px;\n            height: 100px;\n            background-color: gray;\n            cursor: pointer;\n            border: 1px solid #000;\n            border-radius: 8px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n\n        .card.flipped {\n            background-color: white;\n        }\n\n        .card.matched {\n            visibility: hidden;\n        }\n    </style>\n</head>\n<body>\n    <h1>Flip Card Game</h1>\n    <div id=\"game-board\">\n        <!-- 12 cartes (6 paires de couleurs) -->\n        <div class=\"card\" data-color=\"red\"></div>\n        <div class=\"card\" data-color=\"blue\"></div>\n        <div class=\"card\" data-color=\"green\"></div>\n        <div class=\"card\" data-color=\"yellow\"></div>\n        <div class=\"card\" data-color=\"purple\"></div>\n        <div class=\"card\" data-color=\"orange\"></div>\n        <div class=\"card\" data-color=\"red\"></div>\n        <div class=\"card\" data-color=\"blue\"></div>\n        <div class=\"card\" data-color=\"green\"></div>\n        <div class=\"card\" data-color=\"yellow\"></div>\n        <div class=\"card\" data-color=\"purple\"></div>\n        <div class=\"card\" data-color=\"orange\"></div>\n    </div>\n    <script>\n        const cards = document.querySelectorAll('.card');\n        let firstCard, secondCard;\n        let lockBoard = false;\n\n        function flipCard() {\n            if (lockBoard) return;\n            if (this === firstCard) return;\n\n            this.style.backgroundColor = this.dataset.color;\n            this.classList.add('flipped');\n\n            if (!firstCard) {\n                firstCard = this;\n                return;\n            }\n\n            secondCard = this;\n            lockBoard = true;\n\n            if (firstCard.dataset.color === secondCard.dataset.color) {\n                firstCard.classList.add('matched');\n                secondCard.classList.add('matched');\n                resetBoard();\n            } else {\n                setTimeout(() => {\n                    firstCard.style.backgroundColor = 'gray';\n                    secondCard.style.backgroundColor = 'gray';\n                    firstCard.classList.remove('flipped');\n                    secondCard.classList.remove('flipped');\n                    resetBoard();\n                }, 1000);\n            }\n        }\n\n        function resetBoard() {\n            [firstCard, secondCard, lockBoard] = [null, null, false];\n        }\n\n        cards.forEach(card => card.addEventListener('click', flipCard));\n\n        function shuffleCards() {\n            cards.forEach(card => {\n                const randomPos = Math.floor(Math.random() * 12);\n                card.style.order = randomPos;\n            });\n        }\n\n        shuffleCards();\n    </script>\n</body>\n</html>",
    "tags": [
      "JS",
      "DOM",
      "Jeu",
      "Événements",
      "Logique"
    ]
  },
  {
    "id": "031",
    "title": "Les balises et attributs",
    "consigne": "Créer un fichier index.html et créer une section contenant un titre principal “Je suis un titre Principal”,\nun titre secondaire “Je suis un titre secondaire”, un paragraphe “Je suis un paragraphe”, une image.",
    "correctionDisponible": true,
    "correction": "<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Exercice HTML</title>\n</head>\n<body>\n  <section>\n    <h1>Je suis un titre Principal</h1>\n    <h2>Je suis un titre secondaire</h2>\n    <p>Je suis un paragraphe</p>\n    <img src=\"image.jpg\" alt=\"Exemple d'image\">\n  </section>\n</body>\n</html>",
    "tags": [
      "HTML",
      "Balises",
      "Attributs"
    ]
  },
  {
    "id": "032",
    "title": "Les listes",
    "consigne": "Créer une liste ordonnée :\n1. Boissons\n2. Légumes\n3. Desserts",
    "correctionDisponible": true,
    "correction": "<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Exercice Liste Ordonnée</title>\n</head>\n<body>\n  <ol>\n    <li>Boissons</li>\n    <li>Légumes</li>\n    <li>Desserts</li>\n  </ol>\n</body>\n</html>",
    "tags": [
      "HTML",
      "Listes"
    ]
  },
  {
    "id": "033",
    "title": "Les liens",
    "consigne": "Créer un lien externe vers le site de Nike et un lien vers une autre page de votre site (nomDeLaPage.html),\nainsi qu'un lien en bas de page qui mène à un titre en haut de page.",
    "correctionDisponible": true,
    "correction": "<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Exercice Liens</title>\n</head>\n<body>\n  <a href=\"https://www.nike.com\">Lien vers Nike</a>\n  <a href=\"nomDeLaPage.html\">Lien vers une autre page</a>\n  <a href=\"#top\">Retour en haut</a>\n\n  <h1 id=\"top\">Titre principal en haut</h1>\n</body>\n</html>",
    "tags": [
      "HTML",
      "Liens"
    ]
  },
  {
    "id": "034",
    "title": "Sélecteurs et déclarations",
    "consigne": "1. Créer un fichier CSS et le lier au fichier HTML.\n2. Créer un élément h1 et une liste ordonnée.\n3. Assigner au sélecteur h1 une couleur verte et une taille de 50px.\n4. Assigner au sélecteur ol une couleur rouge et le mettre en gras.",
    "correctionDisponible": true,
    "correction": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Exercice CSS</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h1>Exemple de titre</h1>\n  <ol>\n    <li>Premier élément</li>\n    <li>Deuxième élément</li>\n  </ol>\n</body>\n</html>\n\n<!-- style.css -->\nh1 {\n  color: green;\n  font-size: 50px;\n}\n\nol {\n  color: red;\n  font-weight: bold;\n}",
    "tags": [
      "CSS",
      "Sélecteurs",
      "Déclarations"
    ]
  },
  {
    "id": "035",
    "title": "Sélecteurs et déclarations avec ID et classe",
    "consigne": "1. Créer un paragraphe.\n2. Créer un deuxième paragraphe, lui donner une `class`, lui assigner une bordure de 4px d'épaisseur, en pointillé et bleu clair et assigner à ce même paragraphe, une opacité de 0.5.\n3. Assigner les valeurs de cette nouvelle CLASS au premier paragraphe.\n4. Le premier paragraphe est centré.",
    "correctionDisponible": true,
    "correction": "<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Exercice CSS</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p id=\"para1\" class=\"para\">Je suis un premier paragraphe</p>\n  <p class=\"para\">Je suis un deuxième paragraphe</p>\n\n  <style>\n    #para1 {\n      text-align: center;\n    }\n\n    .para {\n      border: 4px dotted lightblue;\n      opacity: 0.5;\n    }\n  </style>\n</body>\n</html>",
    "tags": [
      "CSS",
      "ID",
      "CLASS"
    ]
  },
  {
    "id": "036",
    "title": "Les listes",
    "consigne": "Créer une liste ordonnée :\n1. Boissons\n2. Légumes\n3. Desserts",
    "correctionDisponible": true,
    "correction": "<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Exercice Liste Ordonnée</title>\n</head>\n<body>\n  <ol>\n    <li>Boissons</li>\n    <li>Légumes</li>\n    <li>Desserts</li>\n  </ol>\n</body>\n</html>",
    "tags": [
      "HTML",
      "Listes"
    ]
  },
  {
    "id": "037",
    "title": "Les liens",
    "consigne": "Créer un lien externe vers le site de Nike et un lien vers une autre page de votre site (nomDeLaPage.html),\nainsi qu'un lien en bas de page qui mène à un titre en haut de page.",
    "correctionDisponible": true,
    "correction": "<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Exercice Liens</title>\n</head>\n<body>\n  <a href=\"https://www.nike.com\">Lien vers Nike</a>\n  <a href=\"nomDeLaPage.html\">Lien vers une autre page</a>\n  <a href=\"#top\">Retour en haut</a>\n\n  <h1 id=\"top\">Titre principal en haut</h1>\n</body>\n</html>",
    "tags": [
      "HTML",
      "Liens"
    ]
  },
  {
    "id": "038",
    "title": "Les commentaires",
    "consigne": "Créer un commentaire dans votre fichier HTML qui explique ce que fait chaque élément de votre page.",
    "correctionDisponible": true,
    "correction": "<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Exercice Commentaires</title>\n</head>\n<body>\n  <!-- Ce titre est un h1 et c'est le titre principal de la page -->\n  <h1>Mon premier titre</h1>\n\n  <!-- Ce paragraphe contient du texte expliquant le contenu de la page -->\n  <p>Ceci est un paragraphe explicatif.</p>\n</body>\n</html>",
    "tags": [
      "HTML",
      "Commentaires"
    ]
  },
  {
    "id": "039",
    "title": "La structure de la page HTML",
    "consigne": "Créer une page HTML valide avec la structure de base suivante : \n1. Déclaration DOCTYPE\n2. Balise `<html>`, `<head>` et `<body>`\n3. Ajouter un titre à la page",
    "correctionDisponible": true,
    "correction": "<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Document</title>\n</head>\n<body>\n  <h1>Bienvenue sur ma page</h1>\n</body>\n</html>",
    "tags": [
      "HTML",
      "Structure"
    ]
  },
  {
    "id": "040",
    "title": "Sélecteurs et déclarations CSS",
    "consigne": "1. Créer un fichier CSS, le lier au fichier HTML.\n2. Créer un élément h1 et une liste ordonnée.\n3. Assigner au sélecteur h1 une couleur verte et une taille de 50px.\n4. Assigner au sélecteur ol une couleur rouge et le mettre en gras.",
    "correctionDisponible": true,
    "correction": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Exercice CSS</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h1>Exemple de titre</h1>\n  <ol>\n    <li>Premier élément</li>\n    <li>Deuxième élément</li>\n  </ol>\n</body>\n</html>\n\n<!-- style.css -->\nh1 {\n  color: green;\n  font-size: 50px;\n}\n\nol {\n  color: red;\n  font-weight: bold;\n}",
    "tags": [
      "CSS",
      "Sélecteurs",
      "Déclarations"
    ]
  },
  {
    "id": "041",
    "title": "ID et class en CSS",
    "consigne": "1. Créer un paragraphe.\n2. Créer un deuxième paragraphe, lui donner une `class`, lui assigner une bordure de 4px d'épaisseur, en pointillé et bleu clair et assigner à ce même paragraphe, une opacité de 0.5.\n3. Assigner les valeurs de cette nouvelle `class` au premier paragraphe.\n4. Le premier paragraphe est centré.",
    "correctionDisponible": true,
    "correction": "<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Exercice CSS</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p id=\"para1\" class=\"para\">Je suis un premier paragraphe</p>\n  <p class=\"para\">Je suis un deuxième paragraphe</p>\n\n  <style>\n    #para1 {\n      text-align: center;\n    }\n\n    .para {\n      border: 4px dotted lightblue;\n      opacity: 0.5;\n    }\n  </style>\n</body>\n</html>",
    "tags": [
      "CSS",
      "ID",
      "CLASS"
    ]
  },
  {
    "id": "042",
    "title": "L’héritage et la priorité",
    "consigne": "1. Créer une page HTML avec un style CSS.\n2. Ajouter des styles de couleur et vérifier les comportements d'héritage et de priorité avec les éléments enfants.",
    "correctionDisponible": true,
    "correction": "<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Exercice Héritage</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div class=\"parent\">\n    <p>Texte dans un paragraphe.</p>\n    <div class=\"enfant\">\n      <p>Texte dans un paragraphe enfant.</p>\n    </div>\n  </div>\n\n  <style>\n    .parent {\n      color: red;\n    }\n\n    .enfant p {\n      color: blue;\n    }\n  </style>\n</body>\n</html>",
    "tags": [
      "CSS",
      "Héritage",
      "Priorité"
    ]
  },
  {
    "id": "043",
    "title": "Les types d'éléments en CSS",
    "consigne": "1. Créer une page HTML avec des éléments de type `block`, `inline` et `inline-block`.\n2. Utiliser la propriété `display` pour changer leur type et vérifier le comportement.",
    "correctionDisponible": true,
    "correction": "<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Exercice Display</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div class=\"block\">Block Element</div>\n  <span class=\"inline\">Inline Element</span>\n  <button class=\"inline-block\">Inline-Block Element</button>\n\n  <style>\n    .block {\n      display: block;\n      background-color: yellow;\n      width: 100%;\n      margin-bottom: 10px;\n    }\n\n    .inline {\n      display: inline;\n      background-color: lightgreen;\n    }\n\n    .inline-block {\n      display: inline-block;\n      background-color: lightblue;\n    }\n  </style>\n</body>\n</html>",
    "tags": [
      "CSS",
      "Display",
      "Types"
    ]
  },
  {
    "id": "044",
    "title": "💬 Message dans le chat",
    "consigne": "Objectif : variables, constantes, interpolation, .length, conditions.\n\n🟢 Niveau 1 – Compteur simple\nDemande à l’utilisateur un message via prompt.\nAffiche : \"Ton message fait X caractères.\"\n\n🟡 Niveau 2 – Longueur maximale\nSi le message fait plus de 200 caractères, affiche : \"Ton message est trop long pour être envoyé.\"\nSinon : \"Message accepté.\"\n\n🔴 Niveau 3 – Censure d’un mot banni\nCrée une fonction filtrerMessage(message) qui :\nRemplace toutes les variantes de \"nul\" par \"génial\".\nVariantes à gérer : \"nul\", \"nulle\", \"NUL\", \"Nulle\", \"NULLE\", etc. (Ignore la casse et le genre.)\n\n🔴🔴 Niveau 4 – Message filtré proprement\nAffiche le message corrigé et le nombre de caractères après remplacement.\nSi aucune insulte n’est trouvée, affiche \"Message propre ✅\".",
    "correctionDisponible": false,
    "correction": "<script>\nfunction envoyerMessage() {\n    const message = prompt(\"Ton message dans le chat :\");\n    const lengthMsg = message.length;\n    alert(`Ton message fait ${lengthMsg} caractères`);\n\n    if (lengthMsg > 200) {\n        alert(\"Ton message est trop long pour être envoyé !\");\n    }\n\n    return message;\n}\n\nfunction verifierMessage(message) {\n    if (message.length < 200) {\n        alert(\"OK\");\n        console.log(\"Message original :\", message);\n\n        const regex = /nul(le)?/gi;\n\n        if (regex.test(message)) {\n            const messageCorrige = message.replace(regex, \"génial\");\n            alert(\"Mot banni détecté et corrigé !\");\n            alert(messageCorrige);\n            return messageCorrige;\n        } else {\n            alert(\"Message propre ✅\");\n            alert(message);\n            return message;\n        }\n    } else {\n        alert(\"Ton message est trop long pour être envoyé !\");\n    }\n}\n\nverifierMessage(envoyerMessage());\n</script>",
    "tags": ["JS", "Conditions", "Fonctions", "Chaînes"]
  }, 
  {
    "id": "045",
    "title": "🔐 Validation de mot de passe",
    "consigne": "Objectif : variables, constantes, conditions, .length, fonctions.\n\n🟢 Niveau 1\nCrée une constante `motDePasseAttendu = \"Coucou123\"` et une variable `saisie` (en dur). Affiche si elles sont identiques ou non.\n\n🟡 Niveau 2\nSi le mot de passe est correct, affiche \"Bienvenue !\". Sinon, affiche \"Mot de passe incorrect\".\n\n🔴 Niveau 3\nCrée une fonction `verifierMotDePasse(mdp)` qui :\n- Vérifie qu’il contient au moins 8 caractères.\n- Vérifie qu’il contient \"123\" (simule un critère de complexité simple).\n\n🔴🔴 Niveau 4\nSi le mot de passe est trop court ou ne contient pas \"123\", affiche un message adapté. Sinon : \"Mot de passe accepté\".",
    "correctionDisponible": false,
    "correction": "<script>\nconst motDePasseAttendu = \"Coucou123\";\nlet motDePasseSaisi = \"Coucou321\";\n\nif (motDePasseAttendu === motDePasseSaisi) {\n    alert(\"Mot de passe validé! Bienvenue!\");\n} else {\n    alert(\"Mot de passe incorrect!\");\n}\n\nfunction verifierMotDePasse(mdp) {\n    if (mdp.length <= 8) {\n        alert(\"Mot de passe trop court\");\n    } else if (!mdp.includes(\"123\")) {\n        alert(\"Caractères spéciaux manquants\");\n    } else {\n        alert(\"Mot de passe validé\");\n    }\n}\n\nverifierMotDePasse(motDePasseSaisi);\n</script>",
    "tags": ["JS", "Conditions", "Fonctions", "Chaînes"]
  },
  {
    "id": "046",
    "title": "🧑‍💼 Fiche profil",
    "consigne": "🎯 Objectifs : concaténation, interpolation, conditions, fonctions, et DOM.\n\n🟢 Niveau 1 – Message simple\nCrée les variables prenom et age, puis affiche dans la console :\n\"Bonjour, je m'appelle prénom et j'ai âge ans.\"\nUtilise l’interpolation (pas de concaténation ici).\n\n🟡 Niveau 2 – Message conditionnel\nSi age est supérieur ou égal à 18, ajoute à ton message :\n\"Je suis majeur(e).\"\nSinon : \"Je suis mineur(e).\"\nAffiche le message complet dans la console.\n\n🟠 Niveau 3 – Fonction de génération\nRegroupe ta logique dans une fonction genererProfil(prenom, nom, age)\nElle retourne une chaîne de caractères personnalisée comme :\n\"Bonjour, je m'appelle Jessica Soreau et j'ai 34 ans. Je suis majeure.\"\n\n🔵 Niveau 4 – Affichage sur la page (DOM)\nCrée une section <section id=\"profil\"></section> dans ton HTML.\nUtilise JavaScript pour ajouter un paragraphe dans cette section, contenant le message généré.\n\n🔴 Niveau 5 – Carte profil stylisée avec image\nCrée une div \"carte profil\" contenant :\n- Une image de profil (URL : https://via.placeholder.com/100)\n- Le message retourné par ta fonction\nAjoute cette carte à la section #profil, avec un peu de mise en forme en JS :\n- bordure, ombre, fond clair, texte centré, image arrondie\n\n🔴🔴 Niveau 6 – Bonus facultatif\nPropose une fonction afficherProfil(prenom, nom, age) qui :\n- Génère la carte complète\n- Et l’ajoute dynamiquement au DOM\n(Tu peux ensuite l’appeler plusieurs fois avec différents prénoms)",
    "correctionDisponible": false,
    "correction": "<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Fiche profil</title>\n</head>\n<body>\n  <main id=\"profil\"></main>\n  <script>\n    let nom = \"Pouit\";\n    let prenom = \"Paul\";\n    let age = 30;\n\n    let profilSection = document.getElementById(\"profil\");\n\n    // Création de la carte profil\n    let carte = document.createElement(\"div\");\n    carte.style.border = \"1px solid #ccc\";\n    carte.style.borderRadius = \"8px\";\n    carte.style.padding = \"16px\";\n    carte.style.margin = \"10px\";\n    carte.style.maxWidth = \"250px\";\n    carte.style.boxShadow = \"0 2px 5px rgba(0,0,0,0.1)\";\n    carte.style.fontFamily = \"sans-serif\";\n    carte.style.textAlign = \"center\";\n    carte.style.backgroundColor = \"#f9f9f9\";\n\n    // Image de profil (placeholder)\n    let img = document.createElement(\"img\");\n    img.src = \"https://placehold.co/100\";\n    img.alt = \"Photo de profil\";\n    img.style.borderRadius = \"50%\";\n    img.style.marginBottom = \"12px\";\n\n    // Texte de présentation\n    let message = `Bonjour, je m'appelle ${prenom} ${nom} et j'ai ${age} ans.`;\n    if (age >= 18) {\n      message += \" Je suis majeure.\";\n    } else {\n      message += \" Je suis mineure.\";\n    }\n\n    let p = document.createElement(\"p\");\n    p.textContent = message;\n\n    // Ajout des éléments à la carte\n    carte.appendChild(img);\n    carte.appendChild(p);\n\n    // Ajout de la carte à la section profil\n    profilSection.appendChild(carte);\n  </script>\n</body>\n</html>",
    "tags": ["JS", "Interpolation", "Conditions", "DOM", "Fonctions"]
  }
  
  
  
]